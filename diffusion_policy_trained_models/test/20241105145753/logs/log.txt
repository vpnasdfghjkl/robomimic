
============= Initialized Observation Utils with Obs Spec =============

using obs modality: low_dim with keys: ['robot0_gripper_qpos', 'robot0_eef_pos', 'robot0_eef_quat', 'object']
using obs modality: rgb with keys: ['robot0_eye_in_hand_image', 'agentview_image']
using obs modality: depth with keys: []
using obs modality: scan with keys: []

============= Loaded Environment Metadata =============
obs key agentview_image with shape (84, 84, 3)
obs key object with shape (14,)
obs key robot0_eef_pos with shape (3,)
obs key robot0_eef_quat with shape (4,)
obs key robot0_eye_in_hand_image with shape (84, 84, 3)
obs key robot0_gripper_qpos with shape (2,)
WARNING: could not import mimicgen envs
Created environment with name NutAssemblySquare
Action size is 7
FrameStackWrapper(
    num_frames=2
    env=NutAssemblySquare
    {
        "camera_depths": false,
        "camera_heights": 84,
        "camera_names": [
            "agentview",
            "robot0_eye_in_hand"
        ],
        "camera_widths": 84,
        "control_freq": 20,
        "controller_configs": {
            "control_delta": true,
            "damping": 1,
            "damping_limits": [
                0,
                10
            ],
            "impedance_mode": "fixed",
            "input_max": 1,
            "input_min": -1,
            "interpolation": null,
            "kp": 150,
            "kp_limits": [
                0,
                300
            ],
            "orientation_limits": null,
            "output_max": [
                0.05,
                0.05,
                0.05,
                0.5,
                0.5,
                0.5
            ],
            "output_min": [
                -0.05,
                -0.05,
                -0.05,
                -0.5,
                -0.5,
                -0.5
            ],
            "position_limits": null,
            "ramp_ratio": 0.2,
            "type": "OSC_POSE",
            "uncouple_pos_ori": true
        },
        "has_offscreen_renderer": true,
        "has_renderer": false,
        "ignore_done": true,
        "render_gpu_device_id": 0,
        "reward_shaping": false,
        "robots": [
            "Panda"
        ],
        "use_camera_obs": true,
        "use_object_obs": true
    }
)

/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torchvision/models/_utils.py:208: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and may be removed in the future, please use 'weights' instead.
  warnings.warn(
/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and may be removed in the future. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
Welcome! Welcome to the LowDimCore
Welcome! Welcome to the LowDimCore
Welcome! Welcome to the LowDimCore
Welcome! Welcome to the LowDimCore
number of parameters: 7.622887e+07

============= Model Summary =============
DiffusionPolicyUNet (
  ModuleDict(
    (policy): ModuleDict(
      (obs_encoder): ObservationGroupEncoder(
          group=obs
          ObservationEncoder(
              Key(
                  name=agentview_image
                  shape=[3, 84, 84]
                  modality=rgb
                  randomizer=CropRandomizer(input_shape=[3, 84, 84], crop_size=[76, 76], num_crops=1)
                  net=VisualCore(
                    input_shape=[3, 76, 76]
                    output_shape=[64]
                    backbone_net=ResNet18Conv(input_channel=3, input_coord_conv=False)
                    pool_net=SpatialSoftmax(num_kp=32, temperature=1.0, noise=0.0)
                  )
                  sharing_from=None
              )
              Key(
                  name=object
                  shape=[14]
                  modality=low_dim
                  randomizer=None
                  net=LowDimCore()
                  sharing_from=None
              )
              Key(
                  name=robot0_eef_pos
                  shape=[3]
                  modality=low_dim
                  randomizer=None
                  net=LowDimCore()
                  sharing_from=None
              )
              Key(
                  name=robot0_eef_quat
                  shape=[4]
                  modality=low_dim
                  randomizer=None
                  net=LowDimCore()
                  sharing_from=None
              )
              Key(
                  name=robot0_eye_in_hand_image
                  shape=[3, 84, 84]
                  modality=rgb
                  randomizer=CropRandomizer(input_shape=[3, 84, 84], crop_size=[76, 76], num_crops=1)
                  net=VisualCore(
                    input_shape=[3, 76, 76]
                    output_shape=[64]
                    backbone_net=ResNet18Conv(input_channel=3, input_coord_conv=False)
                    pool_net=SpatialSoftmax(num_kp=32, temperature=1.0, noise=0.0)
                  )
                  sharing_from=None
              )
              Key(
                  name=robot0_gripper_qpos
                  shape=[2]
                  modality=low_dim
                  randomizer=None
                  net=LowDimCore()
                  sharing_from=None
              )
              output_shape=[384]
          )
      )
      (noise_pred_net): ConditionalUnet1D(
        (mid_modules): ModuleList(
          (0-1): 2 x ConditionalResidualBlock1D(
            (blocks): ModuleList(
              (0-1): 2 x Conv1dBlock(
                (block): Sequential(
                  (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                  (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                  (2): Mish()
                )
              )
            )
            (cond_encoder): Sequential(
              (0): Mish()
              (1): Linear(in_features=1024, out_features=2048, bias=True)
              (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
            )
            (residual_conv): Identity()
          )
        )
        (diffusion_step_encoder): Sequential(
          (0): SinusoidalPosEmb()
          (1): Linear(in_features=256, out_features=1024, bias=True)
          (2): Mish()
          (3): Linear(in_features=1024, out_features=256, bias=True)
        )
        (up_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(2048, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(2048, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(512, 512, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(1024, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Upsample1d(
              (conv): ConvTranspose1d(256, 256, kernel_size=(4,), stride=(2,), padding=(1,))
            )
          )
        )
        (down_modules): ModuleList(
          (0): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(7, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(7, 256, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 256, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=512, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(256, 256, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (1): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(256, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 512, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 512, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=1024, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Downsample1d(
              (conv): Conv1d(512, 512, kernel_size=(3,), stride=(2,), padding=(1,))
            )
          )
          (2): ModuleList(
            (0): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(512, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
                (1): Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Conv1d(512, 1024, kernel_size=(1,), stride=(1,))
            )
            (1): ConditionalResidualBlock1D(
              (blocks): ModuleList(
                (0-1): 2 x Conv1dBlock(
                  (block): Sequential(
                    (0): Conv1d(1024, 1024, kernel_size=(5,), stride=(1,), padding=(2,))
                    (1): GroupNorm(8, 1024, eps=1e-05, affine=True)
                    (2): Mish()
                  )
                )
              )
              (cond_encoder): Sequential(
                (0): Mish()
                (1): Linear(in_features=1024, out_features=2048, bias=True)
                (2): Unflatten(dim=-1, unflattened_size=(-1, 1))
              )
              (residual_conv): Identity()
            )
            (2): Identity()
          )
        )
        (final_conv): Sequential(
          (0): Conv1dBlock(
            (block): Sequential(
              (0): Conv1d(256, 256, kernel_size=(5,), stride=(1,), padding=(2,))
              (1): GroupNorm(8, 256, eps=1e-05, affine=True)
              (2): Mish()
            )
          )
          (1): Conv1d(256, 7, kernel_size=(1,), stride=(1,))
        )
      )
    )
  )
)

SequenceDataset: loading dataset into memory...
  0%|                                                                                                                                                           | 0/200 [00:00<?, ?it/s] 56%|###############################################################################3                                                               | 111/200 [00:00<00:00, 1098.97it/s]100%|###############################################################################################################################################| 200/200 [00:00<00:00, 1121.09it/s]

============= Training Dataset =============
SequenceDataset (
	path=/home/camille/sim/robomimic/datasets/square/ph/image_square.hdf5
	obs_keys=('agentview_image', 'object', 'robot0_eef_pos', 'robot0_eef_quat', 'robot0_eye_in_hand_image', 'robot0_gripper_qpos')
	seq_length=15
	filter_key=none
	frame_stack=2
	pad_seq_length=True
	pad_frame_stack=True
	goal_mode=none
	cache_mode=low_dim
	num_demos=200
	num_sequences=30154
)

SequenceDataset: normalizing actions...
  0%|                                                                                                                                                           | 0/199 [00:00<?, ?it/s]100%|###############################################################################################################################################| 199/199 [00:00<00:00, 4445.49it/s]
**************************************************
Warnings generated by robomimic have been duplicated here (from above) for convenience. Please check them carefully.
[33mROBOMIMIC WARNING(
    No private macro file found!
    It is recommended to use a private macro file
    To setup, run: python /home/camille/sim/robomimic/robomimic/scripts/setup_macros.py
)[0m
**************************************************

  0%|                                                                                                                                                           | 0/117 [00:00<?, ?it/s]Backend TkAgg is interactive backend. Turning interactive mode on.
  0%|                                                                                                                                                           | 0/117 [00:35<?, ?it/s]
run failed with error:
Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument mat1 in method wrapper_CUDA_addmm)

Traceback (most recent call last):
  File "/home/camille/sim/robomimic/robomimic/scripts/train.py", line 511, in main
    important_stats = train(config, device=device, auto_remove_exp=args.auto_remove_exp)
  File "/home/camille/sim/robomimic/robomimic/scripts/train.py", line 222, in train
    step_log = TrainUtils.run_epoch(
  File "/home/camille/sim/robomimic/robomimic/utils/train_utils.py", line 684, in run_epoch
    info = model.train_on_batch(input_batch, epoch, validate=validate)
  File "/home/camille/sim/robomimic/robomimic/algo/diffusion_policy.py", line 185, in train_on_batch
    obs_features = TensorUtils.time_distributed(inputs, self.nets['policy']['obs_encoder'], inputs_as_kwargs=True)
  File "/home/camille/sim/robomimic/robomimic/utils/tensor_utils.py", line 986, in time_distributed
    outputs = op(**inputs, **kwargs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/camille/sim/robomimic/robomimic/models/obs_nets.py", line 445, in forward
    self.nets[obs_group].forward(inputs[obs_group])
  File "/home/camille/sim/robomimic/robomimic/models/obs_nets.py", line 235, in forward
    x = self.obs_nets[k](x) # (B*T, C, H, W) -> (B*T, 64)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/camille/sim/robomimic/robomimic/models/obs_core.py", line 204, in forward
    low_dim_features = low_dim_mlp(inputs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1553, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1562, in _call_impl
    return forward_call(*args, **kwargs)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 117, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cpu and cuda:0! (when checking argument for argument mat1 in method wrapper_CUDA_addmm)

Exception ignored in: <function MjRenderContext.__del__ at 0x7efe96cc0790>
Traceback (most recent call last):
  File "/home/camille/sim/robosuite/robosuite/utils/binding_utils.py", line 199, in __del__
    self.gl_ctx.free()
  File "/home/camille/sim/robosuite/robosuite/renderers/context/egl_context.py", line 149, in free
    EGL.eglMakeCurrent(EGL_DISPLAY, EGL.EGL_NO_SURFACE, EGL.EGL_NO_SURFACE, EGL.EGL_NO_CONTEXT)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/OpenGL/error.py", line 230, in glCheckError
    raise self._errorClass(
OpenGL.raw.EGL._errors.EGLError: EGLError(
	err = EGL_NOT_INITIALIZED,
	baseOperation = eglMakeCurrent,
	cArguments = (
		<OpenGL._opaque.EGLDisplay_pointer object at 0x7efd9dd0a740>,
		<OpenGL._opaque.EGLSurface_pointer object at 0x7efe96de2840>,
		<OpenGL._opaque.EGLSurface_pointer object at 0x7efe96de2840>,
		<OpenGL._opaque.EGLContext_pointer object at 0x7efe96de2740>,
	),
	result = 0
)
Exception ignored in: <function EGLGLContext.__del__ at 0x7efe96cc05e0>
Traceback (most recent call last):
  File "/home/camille/sim/robosuite/robosuite/renderers/context/egl_context.py", line 155, in __del__
    self.free()
  File "/home/camille/sim/robosuite/robosuite/renderers/context/egl_context.py", line 149, in free
    EGL.eglMakeCurrent(EGL_DISPLAY, EGL.EGL_NO_SURFACE, EGL.EGL_NO_SURFACE, EGL.EGL_NO_CONTEXT)
  File "/home/camille/miniconda3/envs/robomimic_venv/lib/python3.8/site-packages/OpenGL/error.py", line 230, in glCheckError
    raise self._errorClass(
OpenGL.raw.EGL._errors.EGLError: EGLError(
	err = EGL_NOT_INITIALIZED,
	baseOperation = eglMakeCurrent,
	cArguments = (
		<OpenGL._opaque.EGLDisplay_pointer object at 0x7efd9dd0a740>,
		<OpenGL._opaque.EGLSurface_pointer object at 0x7efe96de2840>,
		<OpenGL._opaque.EGLSurface_pointer object at 0x7efe96de2840>,
		<OpenGL._opaque.EGLContext_pointer object at 0x7efe96de2740>,
	),
	result = 0
)
